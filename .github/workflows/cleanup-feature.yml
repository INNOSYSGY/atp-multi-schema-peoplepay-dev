name: Cleanup APEX Feature Branch

# This workflow runs ONLY when a branch matching 'feature/**' is DELETED
on:
  delete:
    branches:
      - 'wc-**'

  # Allow manual runs for redeploying a feature branch
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'The feature branch to export from (e.g., wc-**)'
        required: true
  
jobs:
  cleanup-feature-app:
    runs-on: ubuntu-latest
    
    environment:
      name: development
      
    steps:
      # No need to check out code, we just need the branch name
      - name: Setup SQLcl
        run: |
          wget https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip
          unzip -o sqlcl-latest.zip
          echo "$(pwd)/sqlcl/bin" >> $GITHUB_PATH

      - name: Find and Remove APEX Application
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          BRANCH_DELETED: ${{ github.event.ref }}
          DB_URL: ${{ vars.DB_URL }}
          DB_USER: ${{ vars.DB_USER }}
          WKSPACE: ${{ vars.WKSPACE }}
        run: |
          # github.ref contains the deleted branch name
          #export BRANCH_DELETED=${{ github.ref_name }}
          echo "🗑️ Branch deleted: ${BRANCH_DELETED}"

          # 2. Create a temporary SQL script to find and remove the application
          cat > cleanup.sql <<EOF
          SET SERVEROUTPUT ON;
          DECLARE
              v_branch_name VARCHAR2(255) ;
              v_app_id NUMBER;
          BEGIN
              v_branch_name := '${BRANCH_DELETED}'; 
              -- Find the app_id for the deleted branch
              SELECT apex_app_id INTO v_app_id
              FROM branch_to_app_id_map
              WHERE branch_name = v_branch_name;

              IF v_app_id IS NOT NULL THEN
                  DBMS_OUTPUT.PUT_LINE('Found App ID ' || v_app_id || ' for branch ' || v_branch_name || '. Removing...');
                  -- Remove the APEX application
                  apex_instance_admin.remove_application(p_application_id => v_app_id);
                  
                  -- Remove the entry from our mapping table
                  DELETE FROM branch_to_app_id_map WHERE branch_name = v_branch_name;
                  
                  COMMIT;
                  DBMS_OUTPUT.PUT_LINE('Cleanup successful.');
              ELSE
                  DBMS_OUTPUT.PUT_LINE('No mapping found for branch ' || v_branch_name || '. Nothing to do.');
              END IF;
          EXCEPTION
              WHEN NO_DATA_FOUND THEN
                  DBMS_OUTPUT.PUT_LINE('No mapping found for branch ' || v_branch_name || '. Nothing to do.');
          END;
          /
          EOF
          
          # 3. Execute the cleanup script

          echo "${{ vars.ATP_WALLET_DEV }}" | base64 --decode > Wallet_DEVENV.zip
          sql  -cloudconfig  Wallet_DEVENV.zip $DB_USER/$DB_PASSWORD@$DB_URL @cleanup.sql












