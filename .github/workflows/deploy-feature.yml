name: Deploy APEX Feature Branch

# This workflow runs ONLY on pushes to branches matching 'feature/**'
on:
  push:
    branches:
      - 'wc-**'
  # Allow manual runs for redeploying a feature branch
  workflow_dispatch:

jobs:
  deploy-feature-app:
    runs-on: ubuntu-latest
    
    # All feature branches will use the 'development' environment and its secrets
    environment:
      name: development
      
    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v4

      - name: Setup SQLcl
        run: |
          wget https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip
          unzip -o sqlcl-latest.zip
          echo "$(pwd)/sqlcl/bin" >> $GITHUB_PATH

      - name: Deploy to APEX and Set Alias
        env:
          GITHUB_TOKEN: ${{ secrets.TOK }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          ENVIRONMENT: ${{ github.ref_name }}
          DB_URL: ${{ vars.DB_URL }}
          DB_USER: ${{ vars.DB_USER }}
          WKSPACE: ${{ vars.WKSPACE }}
          SCHEMA: ${{ vars.SCHEMA }}
          APP_EXPORT: ${{ vars.APP_EXPORT }}

        run: |

          echo "Put the wallet in runner:"
          echo "${{ vars.ATP_WALLET_DEV }}" | base64 --decode > Wallet_DEVENV.zip

          echo "Looking for existing App ID for branch: ${{ github.ref_name }}"

          # This SQL script uses a MERGE statement for atomic "get or create" logic.
          # It outputs the final app_id using dbms_output, which we capture.
          cat > deploy.sql <<EOF
          SET SERVEROUTPUT ON;
          SET FEEDBACK OFF;
          DECLARE
              v_branch_name VARCHAR2(255) := '${{ github.ref_name }}';
              v_app_id NUMBER;
          BEGIN
              MERGE INTO branch_to_app_id_map d
              USING (SELECT v_branch_name AS branch_name FROM dual) s
              ON (d.branch_name = s.branch_name)
              WHEN NOT MATCHED THEN
                  INSERT (branch_name, apex_app_id)
                  VALUES (s.branch_name, apex_app_builder_api.get_application_id) -- Get new available ID
              ;

              -- Select the final app_id (either existing or newly inserted)
              SELECT apex_app_id INTO v_app_id FROM branch_to_app_id_map WHERE branch_name = v_branch_name;

              -- Output the ID so the shell script can capture it
              DBMS_OUTPUT.PUT_LINE(v_app_id);
          END;
          /
          EOF 
          
          APP_ID=$(sql  -cloudconfig  Wallet_DEVENV.zip $DB_USER/$DB_PASSWORD@$DB_URL @deploy.sql)

          if [ -z "$APP_ID" ]; then
            echo "::error::Failed to get or create an App ID from the database."
            exit 1
          fi

          # 1. Sanitize the branch name to create a valid and clean alias
          # e.g., 'feature/new-user-auth' becomes 'FEAT-NEW-USER-AUTH'
          BRANCH_SLUG=$(echo "${{ github.ref_name }}" | sed 's/\//-/g' | tr '[:lower:]' '[:upper:]')
          export APEX_APP_ALIAS="F-${BRANCH_SLUG}" # The final alias, e.g., FFEAT-NEW-USER-AUTH
          
          echo " Branch: ${{ github.ref_name }}"
          echo " Generated APEX Alias: $APEX_APP_ALIAS"
          
          echo "--- Generated app deploy SQL Script ---"
          # Reads the template and outputs a processed file
          envsubst < deploy_apex_app.sql.template > deploy_apex_app.sql
          cat deploy_apex_app.sql
          echo "--------------------------"
          
          # 2. Deploy the application using the standard export file
          echo "Deploying $APP_EXPORT.sql..."
          sql  -cloudconfig  Wallet_DEVENV.zip $DB_USER/$DB_PASSWORD@$DB_URL @deploy_apex_app.sql






