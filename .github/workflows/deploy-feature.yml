name: Deploy APEX Feature Branch

# This workflow runs ONLY on pushes to branches matching 'feature/**'
on:
  push:
    branches:
      - 'wc-**'
  # Allow manual runs for redeploying a feature branch
  workflow_dispatch:

jobs:
  deploy-feature-app:
    runs-on: ubuntu-latest
    
    # All feature branches will use the 'development' environment and its secrets
    environment:
      name: development
      
    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v4

      - name: Setup SQLcl
        run: |
          wget https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip
          unzip -o sqlcl-latest.zip
          echo "$(pwd)/sqlcl/bin" >> $GITHUB_PATH

      - name: Deploy to APEX and Set Alias
        env:
          GITHUB_TOKEN: ${{ secrets.TOK }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          ENVIRONMENT: ${{ github.ref_name }}
          DB_URL: ${{ vars.DB_URL }}
          DB_USER: ${{ vars.DB_USER }}
          WKSPACE: ${{ vars.WKSPACE }}
          SCHEMA: ${{ vars.SCHEMA }}
          APP_EXPORT: ${{ vars.APP_EXPORT }}

        run: |

          echo "Put the wallet in runner:"
          echo "${{ vars.ATP_WALLET_DEV }}" | base64 --decode > Wallet_DEVENV.zip

          echo "Looking for existing App ID for branch: ${{ github.ref_name }}"
          INPUT_BRANCH_NAME="${{ github.ref_name }}"
          
          # This SQL script uses a MERGE statement for atomic "get or create" logic.
          # It outputs the final app_id using dbms_output, which we capture.
          cat > deploy.sql <<EOF
          SET SERVEROUTPUT ON;
          SET FEEDBACK OFF;
          DECLARE
              v_branch_name VARCHAR2(255);
              v_app_id NUMBER;
          BEGIN
          v_branch_name :=  '${INPUT_BRANCH_NAME}';

          -- Select existing app_id from the v_branch_name
          SELECT apex_app_id 
          INTO v_app_id 
          FROM branch_to_app_id_map 
          WHERE branch_name = v_branch_name;

          EXCEPTION
              -- If the SELECT above finds no rows, control IMMEDIATELY jumps here.
              WHEN NO_DATA_FOUND THEN
                  
                  -- Find the next available ID
                  SELECT MAX(APPLICATION_ID) + 1
                  INTO v_app_id
                  FROM APEX_APPLICATIONS
                  WHERE WORKSPACE = '${WKSPACE}';

                  -- Insert the new mapping (uncommented as this is crucial)
                  INSERT INTO branch_to_app_id_map(branch_name, apex_app_id)
                  VALUES (v_branch_name, v_app_id);
                  
            -- Output the ID so the shell script can capture it
            DBMS_OUTPUT.PUT_LINE(v_app_id);
            
          END;
          /
          EOF
          
          export APP_ID=$( sql -S -cloudconfig  Wallet_DEVENV.zip $DB_USER/$DB_PASSWORD@$DB_URL @deploy.sql |  tr -d '[:space:]' | sed 's/SQL>//g' )
          
          if [ "$APP_ID" == "" ];then
            echo "No APP_ID, exiting ..."
            exit 1
          fi

          echo "Using APEX APP ID: $APP_ID"
          echo "export APP_ID=$APP_ID" >> $GITHUB_ENV

          
          # 1. Sanitize the branch name to create a valid and clean alias
          # e.g., 'feature/new-user-auth' becomes 'FEAT-NEW-USER-AUTH'
          BRANCH_SLUG=$(echo "${{ github.ref_name }}" | sed 's/\//-/g' | tr '[:lower:]' '[:upper:]')
          export APEX_APP_ALIAS="F-${BRANCH_SLUG}" # The final alias, e.g., FFEAT-NEW-USER-AUTH
          
          echo " Branch: ${{ github.ref_name }}"
          echo " Generated APEX Alias: $APEX_APP_ALIAS"
          
          echo "--- Generated app deploy SQL Script ---"
          # Reads the template and outputs a processed file
          envsubst < deploy_apex_app.sql.template > deploy_apex_app.sql
          cat deploy_apex_app.sql
          echo "--------------------------"

          echo "Branch APP_ID: $APP_ID"
          
          # 2. Deploy the application using the standard export file
          echo "Deploying $APP_EXPORT.sql..."
          sql  -cloudconfig  Wallet_DEVENV.zip $DB_USER/$DB_PASSWORD@$DB_URL @deploy_apex_app.sql



























